<?xml version="1.0" encoding="UTF-8"?>

<!-- 
/*
 * This file is part of MiToBo, the Microscope Image Analysis Toolbox.
 *
 * Copyright (C) 2010
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Fore more information on MiToBo, visit
 *
 *    http://www.informatik.uni-halle.de/mitobo/
 *
 */
-->

<xs:schema 
   targetNamespace="http://informatik.unihalle.de/MiToBo_xml"
   xmlns="http://informatik.unihalle.de/MiToBo_xml"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   elementFormDefault="qualified"
   attributeFormDefault="unqualified"
>

<!-- 
MTBXMLRootProject	# a set of root annotations for different images typically 
			# constituting an experiment,  e.g. a series of time points of one tube

        version: string # version of the xml schema
	xsize: integer   # number of pixels horizontally for all images of this experiment
	ysize: integer   # number of pixels vertically for all images of this experiment
	xresolution: float	# spatial horizontal resolution in dpi of all images of this experiment
	yresolution: float      # spatial vertical resolution in dpi of all images of this experiment

	collectionOfImageAnnotations: set of MTBXMLRootImageAnnotation
		# the collection of MTBXMLRootImageAnnotation, one for each image of the expermiment
	rootAssociations: set of MTBXMLRootAssociation 
		# set of root associations identifying roots from different
		# images as representing the same pyhsical root

MTBXMLRootImageAnnotation # set of annotated roots for one image
        rootSetID: integer	# need to be unique within a MTBXMLRootProject
                        # used to associate roots of different images
			# does not contain other information and need not
			# be retained when converting to/from other data structure 
	imagename: string # 
	roots: set of MTBXMLRoot # the set of annotated roots for this image 

MTBXMLRoot   # one root made up of segments building a tree
        rootID: integer	# need to be unique within a MTBXMLRootImageAnnotation
                        # used to reference to associate roots of different images
			# does not contain other information and need not
			# be retained when converting to/from other data structure 

	startSegmentId: integer # Id of the first RootSegment of this Root; may be negative to indicate an "empty" root
	rootSegments: set of MTBXMLRootSegment

	isCompletleyReconstructedFromWhinRhizotron: boolean # indicated ith this root has been completely reconstructed from an WInRhitoTron pattern file

MTBXMLRootSegment # one straight segment of a root,
		# geometrically the segment is define by a straight center segment
		# and radii at both end points of the center segment
		#
		# these radii define straight segments perpendicular to the center segment
		# at the end points twice length of the corresponding radius; 
                # the endpoints of these segments in turn define the corners of the 
		# root segment rectangle

	segmentId: integer # needs to be unique within a MTBXMLRoot
                           # used to define the tree structure of root segments
			   # does not contain other information and need not
			   # be retainen when converting to/from other data structure 
                           
	rootId: interger   # Id of the root this segment is part of
	parentId: integer
			# each rootsegment's startpoint has
			# either the Id of one parent root segment or negative 
			# if segment is the root/first segment of the tree
	startPoint: MTBXMLRootSegmentPoint
	endPoint: MTBXMLRootSegmentPoint
			# these points define the straight center line segment
			# where the startPoint is connected to a typically identical
			# endPoint of its parent segment
	startRadius: float  # half width of the segment at the start point
	endRadius: float  # half width of the segment at the end point

	#additional properties
	type:  MTBXMLRootSegmentStatus
	score: float #

MTBXMLRootSegmentPoint # a 2D point
	x	float
	y 	float

MTBXMLRootSegmentStatus  # status of a root segment
    "LIVING" 
    "DEAD" 
    "DECAYED"
    "GAP"	# this segment is not visible in the image but infered for complete topology of roots


MTBXMLRootAssociation   # associate roots from different images as representing the same pyhsical root
			# not more than one root of each image (i.e. MTBXMLRootImageAnnotation) may be part of one association
	rootReferences: set of MTBXMLRootReference

MTBXMLRootReference    # refers to one root in one image
	rootSetID: integer
        rootId: integer

-->



 <!-- to create a Document-->
 <xs:element name="MTBXMLRootProject" type="MTBXMLRootProjectType">
 </xs:element>

 <!-- types-->
 <xs:complexType name="MTBXMLRootProjectType">
  <xs:sequence>
   <xs:element name="version" type="xs:string" fixed="1"/>
   <xs:element name="xsize" type="xs:int"/>
   <xs:element name="ysize" type="xs:int"/>
   <xs:element name="xresolution" type="xs:float"/>
   <xs:element name="yresolution" type="xs:float"/>
   <xs:element name="collectionOfImageAnnotations" type="MTBXMLRootImageAnnotationType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="rootAssociations" type="MTBXMLRootAssociationType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="MTBXMLRootImageAnnotationType">
  <xs:sequence>
   <xs:element name="rootSetID" type="xs:int"/>
   <xs:element name="imagename" type="xs:string"/>
   <xs:element name="roots" type="MTBXMLRootType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="MTBXMLRootType">
  <xs:sequence>
   <xs:element name="rootID" type="xs:int"/>
   <xs:element name="startSegmentID" type="xs:int"/>
   <xs:element name="rootSegments" type="MTBXMLRootSegmentType" minOccurs="0" maxOccurs="unbounded"/>
   <xs:element name="isCompletleyReconstructedFromWhinRhizotron" type="xs:boolean"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="MTBXMLRootSegmentType">
  <xs:sequence>
   <xs:element name="segmentID" type="xs:int"/>
   <xs:element name="rootID" type="xs:int"/>
   <xs:element name="parentID" type="xs:int"/>
   <xs:element name="startPoint" type="MTBXMLRootSegmentPointType"/>
   <xs:element name="endPoint" type="MTBXMLRootSegmentPointType"/>
   <xs:element name="startRadius" type="xs:float"/>
   <xs:element name="endRadius" type="xs:float"/>
   <xs:element name="type" type="MTBXMLRootSegmentStatusType"/>
   <xs:element name="score" type="xs:float"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="MTBXMLRootSegmentPointType">
  <xs:sequence>
   <xs:element name="x" type="xs:float"/>
   <xs:element name="y" type="xs:float"/>
  </xs:sequence>
 </xs:complexType>

 <xs:simpleType name="MTBXMLRootSegmentStatusType">
  <xs:restriction base="xs:string">
    <xs:enumeration value="LIVING" />
    <xs:enumeration value="DEAD" />
    <xs:enumeration value="DECAYED" />
    <xs:enumeration value="GAP" />
  </xs:restriction>
 </xs:simpleType>

 <xs:complexType name="MTBXMLRootAssociationType">
  <xs:sequence>
   <xs:element name="rootReferences" type="MTBXMLRootReferenceType" minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
 </xs:complexType>

 <xs:complexType name="MTBXMLRootReferenceType">
  <xs:sequence>
   <xs:element name="rootSetID" type="xs:int"/>
   <xs:element name="rootID" type="xs:int"/>
  </xs:sequence>
 </xs:complexType>

</xs:schema>
